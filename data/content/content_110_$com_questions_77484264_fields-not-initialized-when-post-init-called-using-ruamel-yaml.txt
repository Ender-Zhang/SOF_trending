I have two dataclasses: Msg and Field . Msg has a field fields of type list[Field] . I want to assign something to a field of each Field after they have all been initialized which is more or less their relative index in the fields list. However, when I add a __post_init__(self) method to the Msg dataclass, the fields list is empty, so I can't update the indices. Why is this? How is the Msg being initialized without fields being initialized? Is there any way to do what I am trying to do using the class system? I am using Python 3.11 with ruamel.yaml 0.18.5 on MacOS. By default, object serializers such as YAML and pickle have no idea what to do with the attribute mapping for a user-defined object other than to assign the mapping directly to the object's attribute dictionary as-is. This is why you can define a __setstate__ method for your class, so that ruamel.yaml 's object constructor knows in this case to call the __init__ method with the mapping unpacked as arguments, which in turn calls __post_init__ for post-initialization: Demo: https://replit.com/@blhsing1/PowerfulThoseJavadocs You discovered a bug in ruamel.yaml , in that,
up to 0.18.5, the fields for the dataclass
were not properly initialised when consisting of a collection, and only worked and were
tested) with simple scalars. This is going to be fixed in 0.18.6, but until then you can do: which prints: It also looks like your code was missing at the top, so the Field typing was initialisation was not postponed,
and you get a NameError