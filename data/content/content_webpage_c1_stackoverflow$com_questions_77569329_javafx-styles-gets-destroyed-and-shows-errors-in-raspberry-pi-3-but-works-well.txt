I'm worked with JavaFX in windows, then I shift to linux to make GUI for raspberry pi, cause raspberry pi also uses linux. So the error probability should be less. But When I run the jar file in Kali Linux, it works well. But when I run the file in Raspberry Pi, the graphics gets destroyed. And i get some error in terminal of Raspberry pi I'm sharing some necessary files. POM.XML Main.java HelloApplication.java hello-view.xml module-info.java Please Help me to get rid out of this :)
Thanks in advance. You need to use the right version of your execution software for your chosen target platform.  JavaFX (and the JRE) include native components that only run on given platforms. Also JavaFX Java (non-native) components are modularized, with the different Java modules targeting various systems.  For example, there are Java components supporting the Mac system menu in the JavaFX mac module versions that aren't present in other versions.  The same will be true for embedded systems like the Pi, if it has no native windowing system built in, then JavaFX needs to ship with an inbuilt window emulator (like it's monocle system), or it simply won't work correctly, if at all. Here is a list of all of the files for the javafx-graphics module, most recent stable version, (21.0.1), in Maven: https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/21.0.1/ It includes all of the classified dependencies. For Linux you can see there are: javafx-graphics-21.0.1-linux.jar javafx-graphics-21.0.1-linux-aarch64.jar javafx-graphics-21.0.1-linux-arm32-monocle.jar javafx-graphics-21.0.1-linux-aarch64-monocle.jar The one just classified "linux" is for linux running on x64 (Intel and AMD) processors. The one classified "linux-aarch64" is for linux running on ARM 64 bit processors. The one classified "linux-arm32-monocle" is for 32 bit ARM processors and "linux-aarch64-monocle" is for using 64 bit ARM processors running on linux and using monocle : Monocle is the implementation of the Glass windowing component of JavaFX for embedded systems. Monocle provides windowing functionality and access to native graphics for simple embedded systems that do not have an underlying window system. I have not used JavaFX on Pi, nor have I used a Pi and have not researched what processors and capabilities they have, but you can do that and then select the appropriate classified dependency for when you build your application. It will not be just "linux" as you currently have, as that is for Intel processors and Pis don't use Intel processors.  This is (at least one of the reasons) why your application works when run on a Linux system running a 64 bit Intel type processor, but not on a Pi. You need to check the processor type for your target system.  If the Pi 3 is 32 bit, then you need an arm32 version of JavaFX (and the JRE).  If the Pi 3 is 64 bit then you need an aarch64 version of JavaFX.  If the Pi 3 is 64 bit and is running an in-built windowing system (such as x-windows), then the "linux-aarch64" version can be used.  If the Pi 3 is 64 bit and not running a windowing system, then perhaps the "linux-aarch64-monocle" version can be used. So hopefully you understand.  The way you are building and packaging your application is not correct for your target system.  JavaFX Maven builds without classifiers will default to use the classified versions of JavaFX for the system on which they are built.  So, if you build on a Windows Intel processor system, it will use that as the version of JavaFX pulled in by Maven.  But you aren't building your software on the Pi, therefore you need to specify the correct classifier for the Pi for the build for all of the JavaFX dependencies you have (not just the javafx-graphics system), and probably also including transitive JavaFX dependencies. For instance, perhaps if targeting linux-aarch64-monocle for JavaFX 21.0.1 (this is just a guess, I have no way to try it): Such a build will only work on a linux ARM 64 bit system (and no other) and the linux system needs the requisite libraries for JavaFX to work installed (such as glibc 3 for JavaFX 21).  So don't expect it to also work on an Intel Linux system.  It may work on multiple systems if you bundle lots of different classified dependencies in as described here , but that wouldn't seem recommended for a constrained device such as a Pi. I don't know much about the Pi, but I think there are more recent versions of it than 3, so it may be that recent versions of JavaFX have dropped support for older Pi systems (I don't know). What you are doing (shading JavaFX modules into a jar), is entirely unsupported.  That doesn't mean that you won't get it to work, it just means that the software isn't designed to work in that manner (though it may work).  This is why you are warned: "WARNING: Unsupported JavaFX configuration".  So don't expect a lot of support for what you are doing in the manner you are doing it.  If you want a supported distribution of JavaFX for embedded systems, Gluon provides that and you can contact them to discuss it.  I do not provide that nor have the expertise to advise on it. Shading destroys modularity, so you should not provide a module-info for shaded systems, everything should run from the classpath (even though JavaFX doesn't officially support that runtime method). I'm guessing that a preferred method to Maven Shade would be either to provide the modules and native components linked from the JavaFX SDK using jlink, or a compilation to a native binary using GraalVM (neither of which I can advise you on for a Pi target). There may be articles that you may find on the web that detail how to get JavaFX to work on a Pi, some will be outdated and not relevant (or misleading) for recent JavaFX versions, and some might provide good up to date information and instructions (I don't know the right articles to link to here).  Or perhaps instead to rely on a JRE installation on the Pi that includes JavaFX (there may be vendors such as Azul or BellSoft supplying such distributions - I didn't check). Some resources for Pi development with JavaFX (some will be obsolete, but may still contain some relevant info, so be careful following anything too literally): Getting started with JavaFX on Raspberry Pi . Seems like a good guide and also has a related book if you really want to understand the topic. Using a Raspberry Pi to Deploy JavaFX Applications . Oracle tutorial on using JavaFX on the Pi (somewhat dated). Gluon provide a modern guide for JavaFX on embedded systems such as Pi. My advice is to either find and follow a trustworthy guide that details exactly what you need to do to get your software to work on your target system, and if you can't find one, then get professional help from somebody like Gluon.  StackOverflow questions alone probably won't get you the support you need. After a long research in web, I got my solution and I want to share with you all step by step. Install Default JDK on Host Install latest intellij on Host Install OpenJFX on Raspi Install Default JDK on Raspi Then install WiringPi on Raspi Install maven on Raspi Create Project with Maven and default JDK in Host On pom.xml, add shade plugin to return jar file with dependency included pom.xml Then add pi4j in project with maven pom.xml Then add openjfx javafx-graphics if not added yet pom.xml Create a dummy Main class to avoid extends error Main.java Use these two function to check if itâ€™s rapi or not HelloApplication.java mvn clean to clean target and libs mvn install to get shaded jar file in target folder Rememer to build mvn in Raspi And finally, you can now import And enjoy JavaFX with GPIO pins control in Raspberry Pi. A sample JavaFX to turn on and off LED on pin no-13 (Pi4j 2) And remember to clean up GPIO pins Thanks everyone.