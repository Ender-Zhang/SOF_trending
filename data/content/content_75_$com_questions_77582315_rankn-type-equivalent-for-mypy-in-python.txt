In Haskell we can use rankN types like so: Is the same thing possible in python with mypy? I tried the following code in python 3.10.2 with mypy 1.7.1: This produces the following errors, implying that f is specializing to float : I'm not necessarily expecting this to work since the magic syntax in the Haskell case is the nested forall , but I don't know if there is a similar way to convey this to mypy if it is possible at all. I’m not familiar with mypy, but my guess is that you can (and must) represent this as a protocol with a generic method, in order to scope the type variable to be per method call, rather than per invocation of rankN . Now rankN(lambda x: abs(x)) is accepted, while rankN(lambda x: str(x)) is rejected. I was surprised that rankN(lambda x: x / 2) is also accepted, since int isn’t really a subtype of float , but I guess it floats like a duck . I'm no Python expert, but from such issues as python/mypy#4395 it seems like this doesn't exist and probably never will.