I'm struggling for quite some time now to save a small image in a database and load it to be used as a javafx.scene.image.Image. Several solutions that I tried involved using SwingFXUtils.fromFXImage and SwingFXUtils.toFxImage, but it appears that the class requires an entry in the module-info.java file, which I didn't even intend to use. I'm getting this exception: java.lang.NoClassDefFoundError: javafx/embed/swing/SwingFXUtils when trying to use SwingFXUtils. When I use the module system, it breaks another library that I'm using (itextpdf).
So I'd like to avoid that and just find another way to save and load a JavaFX image from DB.
Any suggestions? You mention: Several solutions that I tried involved using SwingFXUtils.fromFXImage and SwingFXUtils.toFxImage, but it appears that the class requires an entry in the module-info.java file, which I didn't even intend to use This is not true. Although JavaFX only supports being loaded as named modules 1 , nothing about JavaFX requires that your own code be modular. The only way you can be getting a NoClassDefFoundError is by failing to include the class on the module-path/class-path at run-time (it must be there at compile-time, otherwise your code would fail to compile). I recommend reading Getting Started with JavaFX to see how to set up a basic JavaFX application with one of the major Java IDEs and/or build tools. But without knowing how you have configured your project and how you are running the project, we will not be able to tell you what specifically is wrong with your setup. That said, what you want to accomplish in general is indeed possible. Here is an example that allows you to browse images on your computer and save them to an in-memory H2 database. The ID and name of the images are put into a TableView which includes a column with an "Open" button that allows you to view an image loaded from the in-memory database. The images are stored as blobs in the database in PNG format, regardless of their original format. The SwingFXUtils and ImageIO classes are used to convert the JavaFX image to a PNG "file". The example does not show you how to deploy the application (e.g., via jpackage ) Versions Here are the versions of libraries and tools I used to build and run the example. Java 21.0.1 (Eclipse Adoptium / Temurin) JavaFX 21.0.1 H2 2.2.224 Gradle 8.4 JavaFX Gradle Plugin 0.1.0 In a comment to your previous question , you stated you are using Gradle, so that is what I used for the example. Source Code There is no module-info.java file. ImageRecord.java Main.java ImageRepository.java ImagesDatabase.java Gradle Files I used the Kotlin DSL, but you can use the Groovy DSL if you want. settings.gradle.kts build.gradle.kts Execution You would execute the above with: Note ./gradlew invokes the Gradle Wrapper . If you have a version of Gradle installed on your computer, then you can generate a wrapper for version 8.4 via: 1. JavaFX does not technically support being loaded from the class-path. That means ideally the JavaFX modules should be on the module-path and resolved as named modules, even if your own code and other dependencies are loaded form the class-path. However, I am not aware of anything that breaks if JavaFX is on the class-path (at least as of JavaFX 21), except that your main class can no longer be a subclass of javafx.application.Application (you would need a separate "launcher class" as the main class). Just know that anything that breaks specifically because JavaFX is on the class-path is unlikely to be fixed by the JavaFX team. Note that the Gradle and Maven plugins provided by OpenJFX configure those build tools to put JavaFX on the module-path.