I'm trying to have text fit a circle while typing, something like this: I've tried following Mike Bostock's Fit Text to Circle tutorial , but failed so far, here's my pitiful attempt: I've also tried to follow @markE's answer from 2013 . But the text doesn't seem to be made to scale with the circle's radius, it's the other way around in that example, with the radius being scaled to fit the text, as far as I was able to understand. And, for some reason, changing the example text yields a text is undefined error, I have no idea why. By example As you did not have a running example I did not try to find the bug if any in your code. Rather I wrote a example using the canvas and 2D API. Justifying text The main problem is where to put the line breaks. There are many ways to do this. The best are complex and involve trying combinations of line breaks and measuring and scoring the result and then keeping the layout that best fits the desired constraints. This is beyond the scope of an SO answer (too subjective). Example A square box to fit a round circle The example breaks a string into lines. The line breaks are inserted if the current line length is greater than the calculated mean character count per line. The number of lines will be the square root of the number of words (If max scaled font can not fit a single line to the circle). Once the lines have been created the example measures each line and calculates the bounding radius. The bounding radius is used to set a scale that will fit the circle. The code writing service result . The function fitCircleText(ctx, cx, cy, radius, inset = 20, text = "", font = "arial", circleColor = "#C45", fontColor = "#EEE") renders the circle and fits  and renders the text. ctx the 2D context on which to render cx, cy The center of the circle in pixels radius The circle radius in pixels inset An approximate inset distance from edge of circle to keep text. (Warning small or negative values will result in text overflowing the circle) text The text to render font the font family (do not include the font size as that is added by the function) circleColor, fontColor The colors There are some constants that relate as well. LINE_CUT A value that changes min line length befor a new line is created. Must be a value greater than 2. The bigger the value the more line breaks will be added. DEFAULT_FONT_SIZE In pixels the size of the font DEFAULT_FONT_HEIGHT Adjustment for height as not all browsers let you measure font height. In example the font height is 1.2 times the font size MAX_SCALE The max scale the text can be rendered at. Example Here is my attempt: I've used some geometry to calculate the bounding box for each line of text.
Canvas' measureText() works somewhat unexpected with leading/trailing whitespaces in text, so something to keep in mind or to improve once understood better. Code queues drawing line by line with the set font size, unless there is a line which doesn't fit into the circle. In that case queue is cleaned and code retries with a reduced font size. This is a linear descent, but a binary search may be used for better performance if stop condition is found. +1 pixel in getHighestSuitableForTextPoint() prevents rounding errors, where text line would flicker because float precision is not the best for this application. The way getHighestSuitableForTextPoint() works is by solving a geometry problem, where you have 3 points on a circle with radiuses going through lower left corner of the bounding box, top left corner of the bounding box, and the middle of the bounding box. The task is to find the coordinates of the bottom left corner of the bounding box, because that's how canvas draws text: from the bottom left corner.
Then I take this point and compare it to a (previous line bottom left point + line height), and take whatever is lower. This way I prevent text overlapping. Here I combine Wrapping Text to Fit Shaped Containers with CSS with an answer to the question: "How can I convert an HTML element to a canvas element?" . In the first snippet you will find the plain example of fitting text into the shape in HTML and CSS. The shape is made using the CSS property shape-outside . And then the full solution where the HTML is a foreign object in a SVG element and the SVG is then placed in a canvas element.