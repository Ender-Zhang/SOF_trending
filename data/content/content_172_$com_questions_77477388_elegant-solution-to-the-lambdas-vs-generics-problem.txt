I am looking for a prettier solution here. The problem is to combine Generics and Lambda Expressions. According to the Java Language Specification this it not possible the way I want. So my question to you: Do you know a more elegant way to handle that problem? Any suggestions or common practice out there? My "List" class, where I need the BiPredicate<T, T> in a lot of functions: My "Library" class, where I want to store template BiPredicate<T, T> s: My "usage" class, where I want to use those templates: If you need to parameterize the BiPredicate s with a type variable, then you won't be able to do this via static fields , because the type variable has to be defined in scope. Something like this is typically implemented via static methods . If you don't need the type variable then see Sweeper's answer . IDENTITY and EQUALITY don't actually need to have generic type parameters if you apply PECS . If you declare them like this: Note that you should use super here because the two type parameters of BiPredicate represent the types that it "consumes". Then do the same thing to getFirstIndexOf : Now you can simply pass IDENTITY and EQUALITY to getFirstIndexOf without any error: Of course, if you don't have control over getFirstIndex , then you cannot do this, and would need to declare a method that returns a BiPredicate like in Slaw's answer. Note that the JLS doesn't guarantee that no new objects are created when you call a method like that, but in reality it's often optimised to not create new objects.