I am currently using the react-typescript-datamaps library in a ReactJS project and facing challenges in customizing the font style and size for country names displayed on the map. Despite efforts, I haven't been able to find a suitable approach to make the necessary changes. Here's an example of the relevant component: Screenshot: The screenshot illustrating the current state: I'm seeking guidance on how to customize the font size and style for the country names displayed on the map. Any insights or code snippets would be greatly appreciated. Since you are using DataMapsWrapper , I took a look at orenef/react-typescript-datamaps src/DataMapsWrapper.tsx . There is no explicit mention or feature that would allow you to directly customize the font style and size for country names. For customization, you would typically look for props that allow you to pass styles or classes that can be applied to the text elements, but these are not available based on the provided source code. If the react-typescript-datamaps library is generating SVG elements for the map, you can directly target these elements using CSS. Open the browser's developer tools and inspect the SVG to identify the text elements that render the country names. They might have a specific class or be a child of a specific SVG group ( <g> element). Write CSS rules that target the identified elements. If the elements have a class name, you can directly target that class. Otherwise, you may need to write a more specific selector, like targeting text elements within a certain parent element. You can either add these styles to your global stylesheet or inject them into the component using inline styles or styled-components. Assuming the text elements have a class name .country-name , the following CSS could be applied: If there is no class, you might need to target SVG text elements more generically, or based on their position in the SVG hierarchy: If you want to inject styles directly in your component, you might have to use a library like styled-components (as explained in this article ), or create a <style> tag within your component that includes your custom CSS. For instance, using a style tag might look like this: You may have to use !important to override any existing styles set by the library. However, this should be a last resort as it makes future maintenance of the styles more difficult. If you're not able to override the styles as needed, you may have to consider other approaches, such as forking the library and modifying it to suit your needs, or overlaying HTML elements with the names styled as you wish. I tried your CSS approach: .datamap { font-size: 16px !important; font-style: italic !important; } . Interestingly, the italic style worked, but the font size remained unchanged. I double-checked the CSS specificity, but couldn't override the font size set by the library's styles. If the font size is not changing despite the !important flag, there might be an inline style or a higher specificity CSS rule applied to the text elements. Use the browser's DevTools to inspect the text elements and check if there is an inline font-size style applied directly to the element. Inline styles will override your CSS unless you use !important , but CSS properties may not override attributes directly set on SVG elements. If the library sets the font size using the font-size attribute on the <text> SVG elements, the CSS may not affect it. Sometimes, merely using !important is not enough if another rule has higher specificity. You can increase the specificity of your selector by including more parent selectors or using an id if available: you can include more parent elements in the selector chain or use an ID, which inherently has a higher specificity than class selectors. If .datamap is a class applied to an SVG within a parent with a class .map-container , the selector could be: If thereâ€™s an ID on any parent element, you can use it to increase specificity since ID selectors have a higher specificity than class selectors: As a last resort, you could use JavaScript to directly manipulate the SVG text elements. That could be done within a useEffect hook that runs after the component has mounted: If the library uses SVG attributes for setting the font size (such as font-size attribute on the <text> elements), CSS may not override it. You would need to use JavaScript to change these attributes. However, this is not the most React-friendly way as it bypasses the virtual DOM, but it can be a practical solution if CSS fails due to how the library applies styles.