Closed . This question needs to be more focused . It is not currently accepting answers. Want to improve this question? Update the question so it focuses on one problem only by editing this post . Closed yesterday . Improve this question I would like to seek for advice on the ways to implement an AWS Lambda application (in our team's AWS account) for performing file archiving task. Objective To archive files hosted on a Windows Server shared folder (connectable by SMB): (1) Check if a folder has a name that corresponds to a date older than 18 months from today (2) If it is the above case, download a copy of the folder into a S3 bucket (in some other team's AWS account which is different from ours where the Lambda app will be hosted) (3) Delete the folder in the file server Setting The folders in the file server are grouped by month and then by date inside. Each day folder contains data of more than 10GB. Implementation I was asked to implement a Java Spring Boot-based AWS Lambda application for this purpose. Below is what I have in mind for the Lambda: (1) Lambda gets triggered on schedule every day (2) Connect to the file server (3) List and loop the folder names and look for the folders having folder names of date older than 18 months before today (4) Copy the folder to local in Lambda app (5) Copy the folder from Lambda app into S3 bucket in the target AWS S3 bucket (6) Delete the folder from Lambda app and source file server once copy is completed Questions (1) I have been researching on libraries that can be used, and the "Spring Integration" is what I currently have found. Is this the suitable libray to be used?
Ref. https://docs.spring.io/spring-integration/reference/smb.html (2) By following the example at https://docs.spring.io/spring-integration/reference/smb.html#outbound-gateway-java-dsl , I was able to copy a file from file server to local. How can we loop through the folder names on the file server, and check if any folder name has a date that matches the target date range? (3) Are we able to perform the operations (list, download, upload, delete) in batch for efficiency? (4) Is there a way to implement this such that we can download the folders from the file server and upload to AWS S3 on the fly, without the need to download the folders to Lambda local first? I am aware that a Lambda can only have 10GB memory at most, and run for 15min. (5) If we have to download the folders to Lambda local first, what is the best way to optimise the operation logic here? e.g. downloading, uploading and deleting folders one-by-one creates overhead. I never implemented AWS Lambda, but according to your explanation and requirements, it really sounds like Spring Integration with respective channel adapter are a tool to help you. So, indeed to read from SMB with that your dynamic pattern against dirs we have to use an SmbOutboundGateway with nlst command and provide a FileListFilter with that date-based pattern matching. The result list of dir name, can be sent to the splitter for the next SmbOutboundGateway with ls command already to fetch files from each of those dirs. Then you send the List<SmbFileInfo> to another splitter to send this remote files one by one to S3. But before that you can use a transformer to get an InputStream : In the end the S3MessageHandler is able to take that InputStream from request message and publish it into S3 bucket. Yes, that S3MessageHandler is able to transfer the whole dir, but it really has to be local to the current file system. The solution I suggest you is out of batch support and control, but at the same time it does not use local file system. You also can use splitter output channels as ExecutorChannel to be able to produce (and therefore process downstream) splitted item in parallel. See more info in Spring Integration docs: https://docs.spring.io/spring-integration/reference/channel/implementations.html#executor-channel https://docs.spring.io/spring-integration/reference/splitter.html https://docs.spring.io/spring-integration/reference/smb.html https://github.com/spring-projects/spring-integration-aws