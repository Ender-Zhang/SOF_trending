I have m trucks to carry load, a given truck is available only on mentioned days from Left[i] to Right[i] , the truck capacity is represented as Capacity[i] and charges some amount represented as Cost[i] So every truck has 4 parameters, day numbers represented as Left[i] to Right[i] with Capacity[i] and Cost[i] For given n days as input and I need to carry a load of capacity k on each day, find the minimum cost to transport the load using the trucks. Example: Answer: Explanation: Constraints: This is my approach: My code has time complexity of O(n*m*m) , how to solve this in less time? Where did you get O(n*mÂ²) for yours? I see a O(n*m*log(m)) Could be brought down to O(n*m+m*log(m)) You can solve this in O(m log m) time. First create two sorted lists of trucks: a "left list" of trucks ordered by the day they become available; and a "right list' of trucks ordered by the day they become unavailable; Then, create an empty order statistic tree of trucks, ordered by cost.  In each node of the tree, we will record the total capacity of its subtree and the total cost to carry that full capacity for a day.  We will store available trucks in here. Now, process all the "important" days, which are the days on which any truck becomes available or unavailable, in order. On each important day: determine the number of preceding days, since the last important day, that you had to carry freight. If that number is not zero, then do a search in the order statistic tree of available trucks to find most expensive truck that you must use, and the total cost and capacity of all the cheaper trucks.  From the result you can calculate the cost per day in the preceding period to carry the required freight. Add all the trucks that become available on the current important day to the tree Remove all the trucks that become unavailable on the current important day from the tree.