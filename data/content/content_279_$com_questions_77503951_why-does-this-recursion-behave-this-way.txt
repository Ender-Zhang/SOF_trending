I'm learning about recursion and I ran this function to track the "count" variable to see how it changes while the recursion is going through. After getting 4 strings of "Hello." back after the count was already 0 I wanted to check what was happening to the count. I found that it was actually incrementing by one, but I don't know why it would. Why is the count incrementing after the count was already set at 0? Is it going back to its original value after terminating the recursion? This is the output of the code: It's not incrementing, and in fact the value of count never changes at all.
It's just being output twice: In between those two is where the recursion occurs.  So in the output: and: Until: There's nothing special about recursion, and new developers tend to very much over-think it.  The method itself doesn't do anything particularly complex.  Ignore for a moment that it's recursive and just examine what it does: So, unless the value passed to the method is 0 , every call to the method will produce four lines of output: the number that was passed to it a string the number that was passed to it again another string So for any call to the method where you don't pass the value 0 , you should expect to see the value that you do pass to it output twice. The value of count is neither incrementing or decrementing inside the method. The variable is assigned to the value of i in the first line of your method. It stays at that value for that specific method invocation . This means when you call sayHi(4) you are executing the following pseudo code: So at the start and at the end, the value 4 is printed, as you have such two println() statements (and you don't exit the method early at the if() statement). Due to the recursion, at some point you are calling sayHi(0) , which result in the following pseudo code execution: There are two println(0); calls, but since the if() condition is met, this method exits at that location early and the second println() statement isn't executed at all. That's why you have only one 0 printed in your output. "... I'm learning about recursion ..." Here are some note-worthy texts. The following book, by No Starch Press Publishing , has some excellent examples of recursion, using JavaScript , and Python . No Starch Press Publishing – The Recursive Book of Recursion . Additionally, Wikipedia provides a great article, covering the topic of recursion in computer science . Wikipedia – Recursion (computer science) . "... Why is the count incrementing after the count was already set at 0? Is it going back to its original value after terminating the recursion? ..." Utilize the String#indent method, to accent the stacking order of each call . You can presume a LIFO order; which is "last-in, first-out" , meaning, the most recently added value, is the first to be removed. Like a stack of plates at a buffet, to paraphrase. Here is an example. We'll decrease i , and increase x . On call 4 , where i is 0 , we return, arriving after the invocation of call 3 , and print i , "after, i = 1" . Output