Certainly! Here is a draft of your Stack Overflow question with proper code formatting: Title: How to calculate time between sessions for each ID in a Pandas DataFrame using Polars? Question: I am working on a task where I have a Pandas DataFrame using Polars library in Python, containing columns for 'ID' and 'Timestamp'. Each row represents the end of a session identified by the 'Timestamp'. I am trying to create a new column called 'time_since_last_session', which should contain the time duration between sessions for each unique 'ID'. I have been able to compute the time difference between sessions for a specific filtered 'ID' using the following code: However, I'm struggling to perform this calculation for each 'ID' in the DataFrame using a group_by() operation or similar. I have attempted to use map_groups() but haven't been successful. Could someone please guide me on how to perform this operation efficiently for each 'ID' using Polars? A minimal reproducible example would be this: This example creates a sample DataFrame and calculates the time difference between sessions for a specific 'ID'. However, the goal is to perform this calculation for each unique 'ID' in the DataFrame efficiently using Polars. Any help or insights would be greatly appreciated! the expected result for the final df in the minimum example would be: Contrary to the accepted answer, you should try to avoid using any map or apply function and instead prefer the native expressions API. The desired result can easily achieved with the window function pl.Expr.over as follows. You can group by ID and then apply the rolling diff to each group: