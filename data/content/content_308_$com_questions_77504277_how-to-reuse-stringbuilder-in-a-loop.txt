What am trying to do here is to improve speed performance by using StringBuilder outside the loop and clear StringBuilder in each cycle for reuse , but seems like this approach doesn't always work , because I didn't see improvement in speed performance.* When I used the StringBuilder inside the loop it took 30 sec for the process to finish, but with this approach shown above is taking 50 sec for the process to finish which was not what I expected.Thanks in advance. To improve the performance: Using BufferedWriter can improve the performance by reducing the number of I/O operations. Using Java's ExecutorService or other parallel processing techniques. This involves dividing the workload among multiple threads to take advantage of the processors. You would specify an executor service backed by a pool of a certain number of threads. Adjust the number of threads based on your goal and your number of CPU cores. Submit your tasks defined as Runnable or Callable objects. I tried this and it took 20 seconds (See the foto below) In Java 21+, using virtual threads is generally best for tasks that involve blocking such as file I/O. An ExecutorService is AutoCloseable . So we can use try-with-resources syntax to automatically close and shutdown when done. setLength is more time intensive than the StringBuilder's constructor. Granted, you won't see a difference until you start measuring at the  nanosecond level, but the idea that you will save time by reusing the same instance of a StringBuilder is faulty. Something like this would be a great candidate for concurrency if your focus is simple speeding up the process.