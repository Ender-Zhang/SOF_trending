I am trying to reproduce some C++ code in Python that involves random number generations. The C++ code uses the MT19937 generator as follows: The Python version is (with NumPy 1.23.3) In both cases, the random seed is set to 1234 . But the two produce different outputs on my machine (macOS 14.0 ARM). The C++ code outputs while the Python code outputs Why do the two MT19937 generators produce different sequences despite the same seed? How (if possible) can I make them the same? The C++ standard library version of the mersenne twister engine is different from all other versions in how the state is initialized from an integer seed. You can either use another mt19937 library in C++ that matches the numpy method (which I think is the way that most people implement mt19937), or you can change how your Python engine is seeded to match: These both should produce the same output: Now converting these 32 bit numbers into floating point numbers between 0 and 1 will have different results depending on how the algorithm is implemented. You would have to use some way that is standardised to give the same result given the same random number from the mersenne twister. (Also, std::uniform_real_distribution<double> distribution(0.0, 1.0); will not give you the same sequence of numbers on different platforms) Alternatively, you can have a small portion of C++ code that you call with ctypes or otherwise that only generates the random numbers for you, and you can have the rest of the code in Python. The Mersenne Twister generator has a defined sequence for any seed that you give it. There are also test values that you can use to verify that the generator you use is conforming. The distributions are on the other hand not standardized and may produce different values in different implementations. Remove the distribution to compare the generators. Note also that std::mt19937 is a 32 bit generator and it's not obvious (to me) if the numpy version is a 32 or 64 bit generator. You may want to compare std::mt19937_64 with the numpy implementation - still without involving a distribution of course.