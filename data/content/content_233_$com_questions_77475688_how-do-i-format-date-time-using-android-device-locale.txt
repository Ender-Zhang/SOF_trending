I am using the java.time package in Android, and I want to format a ZonedDateTime according to the user's device settings. I tried my default DateTimeFormatter.ofLocalizedDateTime/ofLocalizedTime , but these always use a fixed format regardless of the device's setting (e.g., always using 12-hour format even if the handset is set to 24-hour). How do I get a java.time.format.DateTimeFormatter that respects the user's device preferences? There are lots of questions on SO about formatting localized dates on Android, but all of the answers either refer to the legacy Date API or disregard the device's settings. As you have seen, DateTimeFormatter.ofLocalized… does not honor the user’s own localization-detail settings such as 12/24-hour clock. CLDR Instead, that class draws upon a specific set of localization rules. In older Java, a limited set of localization rules was bundled. In contrast, modern Java bundles the elaborately detailed localization rules published by the Unicode Consortium , Common Locale Data Repository (CLDR) . At first the CLDR was of secondary use in Java. In Java9+, the CLDR is the default source of localization rules. I do not know what Android uses as its source of localization rules. Affecting output I can understand wanting to alter localized output. For example, many of the localized formats use a two-digit year which I have found causes all kinds of confusion in business. I would like to override that one aspect of  localized formatters, to always use four-digit years. One way to affect the localized output would be specifying a sub-culture. The CLDR defines many of these. Perhaps you could start with a DateTimeFormatter produced by DateTimeFormatter.ofLocalized… . Then use DateTimeFormatterBuilder to override aspects. This is mere speculation; I’ve not tried that.