I have a two dimensional numpy array where some rows may have nans. I want to select the occurrence or absence of nans in rows of these arrays as per the following prescription: If a row does not start with a nan, then the result for that array will be -1. If a row starts with a nan, then the result will be the index of the last nan in the continuous unbroken sequence of nans which started at the beginning of that row. What is the most optimal way of doing this? In my actual work, I will be dealing with numpy arrays with millions of rows. As an example lets consider the below array: Here the expected result will be result = [-1, 2, 1, -1, 0, 4] . Below is a successful code that I have tried. But, I would like a more optimal solution. You can add a column of non-nan with hstack , check which values are nan with isnan and get the position of the first non-nan with argmin : Or without concatenation and using where to fix the case in which all values are nan: Output: