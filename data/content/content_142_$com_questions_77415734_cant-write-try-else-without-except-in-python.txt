I want to write something shaped like this this except the invalid_task and work functions are of course written inline. But you can't write just: You need an except to write an else (try-else-finally also doesn't work). The use case for an else without an except is to run some code on a non exception exit of the block. There are a few ways to exit a block, like return , break , or reaching the end of one of the code paths inside it. Should python allow try-else without except? Is there a better way to write this? My current solution is: For this case specifically you can use: For general cases pass can be used: aneroid correctly pointed out that the code example does not work. The best way to do the thing that I've found is: (But the accepted answer works for me)