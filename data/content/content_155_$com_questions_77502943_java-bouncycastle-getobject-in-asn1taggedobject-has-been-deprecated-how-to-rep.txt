When upgrading to version 1.71 of BouncyCastle we get following warning when compiling: warning: [deprecation] getObject() in ASN1TaggedObject has been deprecated  ASN1OctetString url = (ASN1OctetString) location.getObject(); I can see from: https://javadoc.io/doc/org.bouncycastle/bcprov-jdk15on/latest/org/bouncycastle/asn1/ASN1TaggedObject.html#getTagClass-- following description: getObject() Deprecated.  Tagged objects now include the tag class. This method will raise an exception if it is not BERTags.CONTEXT_SPECIFIC. Use getBaseUniversal(boolean, int) only after confirming the expected tag class. I have no clue how to rewrite the getObject() or this so this warning disappears. Any help much appreciated. When asking for how to parse some ASN.1 structure, you would ideally give the ASN.1 definitions involved. In this case it's especially important since correctly parsing a tagged object requires knowing the tag definition (as well as whether implicit tagging is enabled in the relevant ASN.1 module). The old getObject assumed you had already checked the tag number ( getTagNo ) and it also only worked for CONTEXT_SPECIFIC tags using explicit tagging. A reasonable guess at a replacement would be: where 'tagNo' is the tag number, which ought to be known at the call site, and 'true' indicates the field is using explicit tagging. From your example code we can see that the overall extension being parsed here is an Authority Information Access (read about the extension here ); technically the ASN.1 type is AuthorityInfoAccessSyntax . It's worth reading that section to understand in particular that the 'accessLocation' (being a GeneralName) can take several forms (though I assume it's OK to only process the URI one if you can't make use of the others). BouncyCastle already has a class for parsing these: So you could rewrite your method something like this: You should probably also deal with the possibility of there being multiple access descriptions for a given access method (so potentially multiple URIs). For your second example ( getCrlUrlFromExtensionValue ), BC has this ASN.1 type (refer also to RFC 5280 4.2.1.13 ): Example code: After some reading this is the solution: So replacing getObject() with getBaseObject()