The k-index measures the condition of the magnetosphere. It is usually averaged over three hour, so each day has 8 measurements. The planetary k-index (kp-index) is an average of the measures taken in 15 locations in the world, while the estimated kp-index is an average taken over only 8 locations . The data is available here: https://www.swpc.noaa.gov/products/planetary-k-index If you take a look at their data for the last 30 days: https://services.swpc.noaa.gov/text/daily-geomagnetic-indices.txt You can see that they give the k-index measured in two different locations (Fredericksburg and College), as well as the estimated kp-index. (You can ignore the columns marked "A".) A single training point is the 8-value vector of the k-index in Frederickburg on a certain day, and its label is the 8-value vector of the estimated kp-index on that same day. Having trained the algorithm on a large number of sample points, a new query is the k-index in Frederickburg on a different day (with no label), and the algorithm must produce an 8-value vector which is its guess for the estimated kp-index on that day. For example, if the query vector was 2 2 1 2 1 2 1 2 (the k-index vector for Fredericksburg yesterday), then the answer 2.00 0.67 0.67 0.67 0.67 1.33 1.00 1.33 would have zero error, as this is exactly the estimated kp-index for that day. Of course, we can't really expect the algorithm to produce a solution with zero error. My Intention: An interesting question is can the k-index in either of the two individual locations be used to predict the estimated kp-index? My Thoughts: My thought is that this can be done by training a learning model (for example SVR) on some of the data (where a point is an 8-vector from either Fredericksburg or College representing some day, and its label is an 8-vector that is the estimated kp-index for the say day), and then testing its error on the rest of the data. I am  programming in python, I might want to use the sklearn.multioutput.MultiOutputRegressor function. My answer: Given dataset.txt My output images are: My question: Is it possible to improve conciseness and complexity of my code? Or is there any alternative approach for this problem? Although I get the accuracy is almost 100% using the above algorithm.