I'm facing a problem since this morning with webapps deployed with Apps Script that used to works fine previously. Of course no changes has been made to justify this problem. External scripts are not loaded from the HTML side, and a new error arise in the console. In order to have a reproducible example: Code.gs index.html: Results in the console: The source problem appears to be the <script src='' loading jQuery. But I didn't notice any troubleshoot coming from Google, is it a new restriction for Apps Script? Screenshots: I've observed that the issue seems to be related to recent changes in the Content Security Policy (CSP) by Google, particularly impacting the use of jQuery in AppScript. This issue has been affecting various developers, and you can find more details and ongoing discussions on the Google Issue Tracker here: Google Issue Tracker - CSP & jQuery Issue . From what I've found, this problem appears to be specific to Chromium-based browsers. In environments like Chrome and Edge, including their incognito modes, jQuery fails to function properly. However, I found that Firefox does not encounter this issue and works as expected. This browser-specific behavior suggests a workaround: if you're experiencing problems with jQuery in your AppScript projects on Chromium-based browsers, try switching to Firefox as a temporary solution until a more permanent fix is implemented by Google. EDIT: found the following workaround. Put this in the very top of your HTML <head> . As per the Google Issue Tracker , here's a workaround to put in the very top of your HTML <head> : Your error suggests that the URL does not comply to your CSP . You have not changed your code - true, but your server has a CSP ruleset and according to that jQuery is refused. You will need to look into the response header of your main request as well as meta tags in your HTML to see what your CSP actually is. Then find where it was defined (either in server settings or meta tags or some custom code) and adjust it so jQuery will be allowed. Alternatively you can download the jquery script locally and link it locally. EDIT I have read about this further, particularly at https://developer.mozilla.org/en-US/docs/Web/API/TrustedHTML and this is particularly interesting, inspired from the link above: Of course, having the HTML of I tested the above and it turned out to be nonfunctional in FireFox and functional in Chrome. So you will need to see whether trustedTypes is supported at all: Now, I would suggest that you could create a function that on the inside checks whether trustedTypes is supported at all and if so, then create a policy. Otherwise just create a function that has a method name. Then, you can call that function in any browser without worrying where it is supported and where not: