Let's assume, that there is a constant flow of threads going through my java code. I would like to stop them in such way, that when a certain flag is changed, all threads will wait on some barrier and then (when the flag is changed again) resume in the same order in which they reached the barrier before all the threads that will come in the meantime. In other words: constant flow of threads, I would like to stop them and then resume in such way that in my flow the order of threads will stay the same. I thought about such solution: I declare those variables in some part of my code (that block of code is run by one thread): Here is my barrier that should count and stop all the threads (that block of code is run by multiple threads): Then, I would like the threads to resume in the same order in which they reach the barrier, so I do: That should release threads from my mutex semaphore in the right order. HOWEVER I had to change my flag, so all the threads that pass thought the barrier will mix with threads released from mutex semaphore! I can do it like that: But, if I put my flag on the other side of the loop, I will be left with some threads waiting on the barrier, because they can come after the end of the loop and before I change my flag. Then what should I do? Any help would be much appreciated.