I am experimenting with Apache POI 5.2.4 and managed to read a toy Excel file using the following cut-together code (Java): The Excel sheet I read in contains just a cell referencing another workbook in the same folder. It was created using Excel 2019 for Mac and is correctly displaying the linked value. Instead of the file name I put into the Excel [Book1.xlsx]Sheet1!$A$3 I only get [1]Sheet1!$A$3 . All other fields like values or strings are returned correctly. I tried looking in the returned structures for currentCell for a string mapping table but could not find anything that was not empty. How can I resolve this [1] into the original workbook name of the referenced Excel? It does not need to find or load it, just return the file name. The formula string [1]Sheet1!$A$3 is how Excel in Office Open XML format ( *.xlsx ) stores links to external workbooks in formulas. So you get what is stored in the file. You can see that if you unzip the *.xlsx file an have a look into /xl/worksheets/sheet*.xml . There you will find someting like: Probably this is to avoid getting formula strings too long. The index within the brackets refers a external reference stored in /xl/workbook.xml : The r:id refers a external link in /xl/workbook.xml.rels . This then refers a external link in /xl/externalLinks/externalLink*.xml . And this external link then refers to the external workbook using /xl/externalLinks/_rels/externalLink*.xml.rels . Apache POI provides org.apache.poi.xssf.model.ExternalLinksTable . But that also may contain DDE and/or OLE linked files and not only linked external workbooks. So the correct way is to get the externalReference first from the workbook and then get the corresponding ExternalLinksTable instead to get all via XSSFWorkbook.getExternalLinksTable . Following method should do what you want if cell is XSSFCell .