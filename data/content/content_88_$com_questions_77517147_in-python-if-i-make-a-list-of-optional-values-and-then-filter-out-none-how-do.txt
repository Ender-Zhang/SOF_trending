In Python, when collecting a sequence of Optional values into an Iterable or List while filtering out None values, how do you express to the typechecker that the element type of the resulting Iterable is no longer Optional and the list does not contain None s? Take the following example: The type checker (Pyright in my case) complains that I can't put the potential None value in the Iterable[ScanFileResult] return type. But since I'm filtering it out, I need some way to assert to prove to the typechecker that the element type is no longer Optional[ResultType] but just ResultType . What's the cleanest way of doing this? Following the suggestion of @MateenUlhaq in the comments the problem you are facing is probably due to the use of filter(partial(is_not, None)) that makes it hard for the language server to infer the type of ots return value. You can make it easier for it by filtering out the None s at the beginning.
The following is an example: With this pyright does not complain since it can infer the type of xs to be list[int] Applying this to your specific case you would get something like: This works on python version 3.10+ (as it uses the := operator).