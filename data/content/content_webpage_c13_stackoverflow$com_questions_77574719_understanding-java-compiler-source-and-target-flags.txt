The javac documentation says: --source release or -source release
Compiles source code according to the rules of the Java programming language for the specified Java SE release. --target release or -target release
Generates class files suitable for the specified Java SE release. but Maven documentation says: setting the source option does not guarantee that your code actually compiles on a JDK with the specified version. Merely setting the target option does not guarantee that your code actually runs on a JRE with the specified version. I don't understand this and find it conflicting. Which of the above is correct? Or, can anyone explain with an example how both are correct? On another page Maven seems to advocate using the release flag instead and says: This means that, unlike the -source and -target options, the compiler will detect and generate an error when using APIs that don't exist in previous releases of Java SE It is not contradictory but maybe not well described. For --source to add more context of the description for Java 17 helps: --source release or -source release Compiles source code according to the rules of the Java programming >language for the specified Java SE release. The supported values of release >are the current Java SE release and a limited number of previous releases, >detailed in the command-line help. It means that the compiler will use the source language rules or parser for the version selected, with limited support for some but not all previous versions of Java. This is limited to the language specification, not libraries. You can select a previous version to avoid using newer features, but you are still linking to the current library of the JDK so you could be using newer class and/or methods that will not be present if you actually execute with an older version of the JDK. --target indicates that you want the generated bytecode to be compatible with the target version and not use bytecodes that are only available in a newer version. Again you still could be depending on APIs (classes/methods) available in a newer version so if you try to execute in the older version of the JDK it may fail. --release was introduce in Java 9 to resolve the problem of API compatibility. In addition to set --source and --target to the same version it ensures that also the standard library used is compatible with the version selected. More information is available in this answer: https://stackoverflow.com/a/43103038/721855 --release documentation for Java 17: --release release Compiles source code according to the rules of the Java programming language for the specified Java SE release, generating
class files which target that release. Source code is compiled against
the combined Java SE and JDK API for the specified release. The supported values of release are the current Java SE release and a limited number of previous releases, detailed in the
command-line help. For the current release, the Java SE API consists of the java. , javax. , and org.* packages that are exported by the Java SE modules
in the release; the JDK API consists of the com.* and jdk.* packages
that are exported by the JDK modules in the release, plus the javax.*
packages that are exported by standard, but non-Java SE, modules in
the release. For previous releases, the Java SE API and the JDK API are as defined in that release. The Maven configurations mentioned just lets you configure those
values. This is about how the Java compiler is told to do its work. The rules of how to interpret Java programs, and what the output files should look like has changed over the years. -source X means the compiler should follow the rules when parsing source code for Java version X.  An example could be how to interpret the @Overrides annotation which was invalid in Java 5, but very useful in Java 6.  Another that lambda expressions came in Java 8. -target Y means that the output files (classfiles) should follow the rules for Java version Y.  This is usually important because old JVM's cannot understand classes compiled for newer JVM's as they contain new stuff that they don't know how to handle. -release X is a newer flag combining the two.  This is most likely because the OpenJDK java compiler hasn't allowed different source and target arguments for quite some time.  See Maven: javac: source release 1.6 requires target release 1.6 for how the world looked when I wanted to have Java 6 sources compiled for a Java 5 target (there were very good reasons for that). This is what the Oracle documentation tries to tell you. The tricky part here is that even if the Java 17 compiler knows it is compiling Java 8 code, the default behavior is that it can only resolve class references against what is present in the Java 17 JVM it is running in.  Hence, if you happen to use a class not present in Java 8 but in Java 17 the compiler has no way of knowing that and therefore can generate code that can run but not work on the Java 8 JVM. This is what the Maven documentation tries to tell you (as Maven essentially just passes these arguments on to javac in its default configuration). Notes: Unless you have very, very good reason not to, you should write for the latest relevant Long Term Support version.  A good choice is Java 17. These days you should compile your sources for others with the JVM intended to run the program.  This is very easy using docker or build tools like Github Actions.