I have two content type areas which contain unique filter options. These are: type tag I'm trying to utilise isotope.js , to achieve a dual filtering layout, but it always gives the last clicked filter priority. The way I want it to function is: If only one tag is selected, then show results with that tag If more than one tag is selected, then show results that have any of those tags (both do not need to exist together on a card) If a type is selected, only show results that fall under that type If one type is selected and one tag , show results for posts where the tag exists on the selected type If one type is selected and multiple tags , then show posts that fall under that type that have either of those tags . If more than one type is selected and one or more tag s, then show posts where the tag s exist on either type For example, using my demo below, here are some use cases: If I click on "Video Demos & Tours", I should see two video posts (card 1 and 3) - WORKS If I click on "Video Demos & Tours" and then "Ansible", I should see only see card 3 - DOESN'T WORK If I click on "Blog & News", I should see 3 cards (card 2, 4, 5) - WORKS If I click on "Blog & News" and then "Ansible", I should see cards 4 and 5 If I click on "Blog & News", "Ansible" and then "Automation", I should see cards 2,4 and 5 However, in my current demo, though the console log seems to be on the right lines, it doesn't perform the way I intent it to. If I understand correctly, you want to combine filters of the same group with OR and between groups with AND: In selectors (as used by Isotope), that would be: You can build this by going over each group, combining every element with the previously build selectors: If you prefer regular loops, that is something like: Some general hints and recommendations: Card 2 and Card 5 miss the automation class, not sure if that is intentional Instantiate the filter object with empty arrays for all existing groups, it spares you figuring out if the group property already exists later on Separate DOM operations from filter data operations, it makes the code more maintainable Consider creating a class for filter to further split up the code by concern Have a look at the updated snippet: Does that make sense, does it help?