I have a component that holds a single boolean in state and renders a button that toggles that value. The value of the boolean comes from an object that is created in a parent component. When the object is created the button is displayed but the actual value of the boolean is set slightly later by another process. The button renders while the boolean is undefined and the view reflects this. The boolean is then set later by a setTimeout which you can see if you open the console. But the value does not reflect in the button until you click, after which is works fine. Is there a way to watch the object property so that when it updates after 2 seconds the button re-renders to reflect the change? Issue The issue here is that the obj prop that is passed to Child isn't part of any React state and its object reference never changes, it's only mutated. There's no way for React to know that anything changed and that anything needs to be rerendered. Solution Make obj state in the parent component and pass it and the toggle function down as props to the Child component. When the state updates in the parent then the Child component will be automatically rerendered. Example: App.js Child Demo I wonder if you're looking to maybe use Suspense which has a fallback until something has finished loading. I threw a small example together in codepen, I hope it help. https://codepen.io/huzi8t9/pen/GRzEqpX The above example will show "Wait..." until the promise is resolved in the SuspensefulComponent -- the component will return some basic text but, if you had genuine data loading inside your component, Suspense would fire and fallback when loading is happening. Hope this helps. Shouldn't need to duplicate the state in the Child. It outta just rerender when the parent changes. Not sure if this is what you were looking for. Hope it helps! https://codesandbox.io/s/epic-chaplygin-46d38q?fontsize=14&hidenavigation=1&theme=dark&file=/src/App.js:0-45