Edit So I figured it out, I missed the following line I'm trying to implement an email queue, but it's not quite working as expected. The idea is to respond from an endpoint as quickly as possible and then just have the queue manager attempt to process the queue in the background, in this case send out an email. One of the problems is that the interval keeps executing when this.running is set to true . Another problem is that an email sometimes sends out multiple times, when it should only be sent out once. I've also tried using redis for this because I recognise the closure issue with initialize and also saw bull as a potential solution, but I'm trying to avoid as many unneccessary libraries as possible. Ideally, I'd like to make some sort of base class that I can reuse for different queues, for examples an SMS queue, not just an email queue. But for now, I guess I'm just trying to get this email queue to work. What am I doing wrong here? Here's my code: And I use this like so: The primary issue in your implementation is related to the asynchronous nature of email sending and the way you are handling the queue processing and interval checking. JavaScript's event loop and asynchronous nature can lead to unexpected behaviors. Here are some improvements and recommendations: Clear Interval Properly: When clearing the interval, make sure to use clearInterval correctly. It looks like you are using it correctly, but ensure that the interval ID is properly managed. Use await for Promises: Instead of relying on intervals, use await with setTimeout to introduce delays in your asynchronous code. This can make your code more readable and avoid unexpected interactions between promises. Handle Errors Correctly: Ensure that any error in the handleProcessEmailQueue function doesn't leave the interval in an inconsistent state.
Here's an updated version of your code with these considerations: These changes make your code more asynchronous-friendly and use await to handle Promises in a cleaner way. Make sure to thoroughly test the updated implementation to ensure that it behaves as expected.