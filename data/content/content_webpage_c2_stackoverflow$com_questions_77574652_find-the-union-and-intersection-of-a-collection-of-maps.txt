Closed . This question is opinion-based . It is not currently accepting answers. Want to improve this question? Update the question so it can be answered with facts and citations by editing this post . Closed 3 days ago . Improve this question I have a collection of Maps maps and I want a set with all the keys amongst the maps (the union), a set with all the keys common to all the maps (the intersection), and a set with all the keys that are only in some sets but not all (the disjunctive union). My questions are: is there a way to get the disjunctive union "diff" other than just taking the compliment of "same", i.e. is there any way it be done within the for loop in parallel with "all" and "same", instead of after those two sets are created? Second, must I get an element of the collection of maps to initialize "same" with? Or can it be built in the for loop with some other function than "retainAll" and be initialized empty? Basically what, if any, is an alternative logic to the approach given below? if by elegant you mean stream based, maybe try with this: output = a TreeMap with keys and their counts. union = the map keyset intersection = all entries with value = maps.size() different = all entries with value < maps.size() here is a sample run: Update: this problem is very interesting to me, so I coded a generic function to compute the union, intersection and differences (handles nulls): this is the result of a test run, values in maps are ignored, this only processes the keys: